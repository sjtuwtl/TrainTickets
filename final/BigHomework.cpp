/*User seeUser(int userid,const UMAP &usermap,char* inFile){	int k=usermap[userid];	fstream fio(inFile);	fio.seekg(User::Size*(k-1)+sizeof(size_t),ios::beg);	User a;	a.read(fio);	return a;}void onSold(const string &trainid, const string &date) {	}*/bool login(const string &userid, const string &password,const UMAP &usermap,char *inFile){	int id=littleTool::string2Int(userid);	int k;	try{		k=usermap.at(id);	}	catch(...){		return false;	}	User a=userList[k];	if (a.getPSWD()==password) return true;	else return false;}/*void true_register(string s1,string s2,UMAP &usermap){	size_t n;	fstream fio(Userfile);	fio.read(reinterpret_cast<char *>(&n),sizeof(size_t));	++n;	User x((int)n,s1,s2);	registe(x,usermap);}void registe(User &x,UMAP &usermap){	int n=x.registe(Userfile);	MyInt j=x.getID();	pair<MyInt,int> userp(j,n);	usermap.insert(userp);}//put in the user classsize_t registe(char *inFile){	size_t n;	fstream fio(inFile);	fio.seekg(0);	fio.read(reinterpret_cast<char *>(&n),sizeof(n));	fio.seekp(0);++n;	fio.write(reinterpret_cast<const char *>(&n),sizeof(n));	fio.seekp((n-1)*User::Size,ios::cur);	write(fio);	return n;}*/class logClass {	const string outFile;	int size;public:	logClass(const string &t):outFile(t),size(0){}	void user_registerLog(const User &x) {		++size;		ofstream fo(outFile,ios::app);		fo << "User Register ID: " <<x.getID()<<" Name: "<<x.getName()<<endl;		fo.close();	}	void user_modifyLog(const User &x){		++size;		ofstream fo(outFile,ios::app);		fo << "User Modify ID: " <<x.getID()<<" Name: "<<x.getName()<<endl;		fo.close();	}	void admin_insertLog(const Train &x) {		++size;		ofstream fo(outFile,ios::app);		fo << "Train Insert Name: "<<x.name<<endl;		fo.close();	}	void admin_deleteLog(const Train &x) {		++size;		ofstream fo(outFile,ios::app);		fo << "Train Delete Name: "<<x.name<<endl;		fo.close();	}	void admin_modifyLog(const Train &x,const Train y) {		++size;		ofstream fo(outFile,ios::app);		fo << "Train Modify Name: "<<x.name<<endl;		fo << "To: "<<y.name<<endl;		fo.close();	}	int getSize(){return size;}};